var gulp = require('gulp');
var plugins = require('gulp-load-plugins')();
var rimraf = require('rimraf');
var browserSync = require('browser-sync');
var runSequence = require('run-sequence');
// var karma = require('karma').server;

var STYLES = ['src/css/app.less']


// DEVELOPMENT TASKS
//================================================

/*
* 1. Setup a webserver with livereload using BrowserSync
* 2. JS and CSS get processed and served from the 'build' folder
* 3. JSX: Transform jsx React files and put in build 'build' folder
* 4. Compile sass files, autoprefix and put in 'build' folder
* */

 // BrowserSync Server
gulp.task('browser-sync', function() {
  browserSync.init([
    './src/css/*.css',
    './src/js/**/*.js',
    './**/*.html'
  ],
  {
    notify: false,
    server: {
      baseDir: ['./']
    },
    port: 3000,
    browser: ["google chrome"],
    tunnel: false
  });
});


// Default
gulp.task('default', ['browser-sync']);

// Tests
gulp.task('test', function(done) {
  karma.start({
    configFile: __dirname + '/karma.conf.js'
  }, done);
});

// gulp.task('less', function() {
//   gulp.src(STYLES)
//     .on('error', plugins.notify.onError("<%= error.message %>"))
//     .pipe(plugins.sourcemaps.init())
//       .pipe(plugins.less())
//     .pipe(plugins.sourcemaps.write())
//     .pipe(plugins.sourcemaps.init({loadMaps: true})) // Load sourcemaps generated by less
//     .pipe(plugins.autoprefixer({}))
//     .pipe(plugins.sourcemaps.write('.'))
//     .pipe(gulp.dest('build'))
//     .pipe(plugins.notify("Finished building less"));
// });


// DISTRIBUTION TASKS
//===============================================

// Delete dist Directory
gulp.task('delete-dist', function(cb) {
  rimraf('./dist', cb);
});

// Bundle js with jspm
gulp.task('bundle', plugins.shell.task([
  'jspm bundle-sfx ./src/js/app.jsx! ./dist/js/app.js'
]));

// Build Less -> minified css
gulp.task('less', function() {
  gulp.src(STYLES)
    .on('error', plugins.notify.onError("<%= error.message %>"))
    .pipe(plugins.sourcemaps.init())
      .pipe(plugins.less())
    .pipe(plugins.sourcemaps.write())
    .pipe(plugins.sourcemaps.init({loadMaps: true})) // Load sourcemaps generated by less
      .pipe(plugins.autoprefixer({}))
      .pipe(plugins.csso())
    .pipe(plugins.sourcemaps.write('.'))
    .pipe(gulp.dest('./dist/css'))
    .pipe(plugins.rename('app.min.css'))
    .pipe(gulp.dest('./dist/css'));
});

gulp.task('build', ['bundle', 'less']);


// Copy index.html to 'dist'
gulp.task('html', function() {
  gulp.src(['./index.html'])
    .on('error', plugins.notify.onError("<%= error.message %>"))
    .pipe(gulp.dest('./dist'));
});

// Uglify the bundle
gulp.task('uglify', function() {
  return gulp.src('./dist/js/app.js')
    .on('error', plugins.notify.onError("<%= error.message %>"))
    .pipe(plugins.sourcemaps.init({loadMaps: true}))
    .pipe(plugins.uglify())
    .pipe(plugins.sourcemaps.write('.'))
    .pipe(plugins.rename('app.min.js'))
    .pipe(gulp.dest('./dist/js'));
});

gulp.task('dist', function() {
  runSequence(
    'delete-dist',
    ['build', 'html'],
    'uglify'
  );
});